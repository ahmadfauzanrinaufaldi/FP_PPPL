name: CI

on:
  push:
    branches: [main, dev, staging]
  pull_request:
    branches: [main, dev, staging]

env:
  # Variabel lingkungan untuk Project ID GCP Anda
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  # Nama aplikasi Anda, digunakan untuk tag image Docker
  APP_NAME: expense-app

jobs:
  lint:
    name: ESLint Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

  test:
    name: Jest Testing
    runs-on: ubuntu-latest
    needs: lint # Pastikan linting berhasil sebelum menjalankan tes

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run Unit Tests
        run: npm run test

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: test # Pastikan tes berhasil sebelum analisis SonarCloud

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run Tests with Coverage
        # Pastikan skrip 'test' Anda menghasilkan output coverage yang dapat dibaca oleh SonarQube
        run: npm run test -- --coverage

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} # Jika Anda menggunakan SonarQube self-hosted

  docker-build-and-push:
    name: Docker Build and Push to GCR
    runs-on: ubuntu-latest
    needs: sonarcloud # Pastikan semua pemeriksaan kualitas dan tes berhasil

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        # Menggunakan kredensial untuk autentikasi ke GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Configure Docker to use Google Cloud Registry
        # Perlu dikonfigurasi agar Docker dapat push ke GCR
        run: gcloud auth configure-docker

      - name: Docker Build Image
        # Bangun image Docker
        run: docker build -t ${{ env.APP_NAME }}:latest .

      - name: Tag and Push Docker Image to GCR
        # Tag image dengan nama registry GCP dan project ID Anda, lalu push
        run: |
          docker tag ${{ env.APP_NAME }}:latest gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.APP_NAME }}:${{ github.sha }}
          docker tag ${{ env.APP_NAME }}:latest gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.APP_NAME }}:latest
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.APP_NAME }}:${{ github.sha }}
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.APP_NAME }}:latest